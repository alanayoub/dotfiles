snippet d3checklist "D3 chart checklist" b
// 1. Access data
// Look at the data structure and declare how to access the values we’ll need

// 2. Create chart dimensions
// Declare the physical (i.e. pixels) chart parameters

// 3. Draw canvas
// Render the chart area and bounds element

// 4. Create scales
// Create scales for every data-to-physical attribute in our chartMaking a Scatterplot

// 5. Draw data
// Render your data elements

// 6. Draw peripherals
// Render your axes, labels, and legends

// 7. Set up interactions
// Initialize event listeners and create interaction behavior - we’ll get to this step
endsnippet

snippet d3boiler "D3 chart boilerplate" b
// 1. Access data
const dataset = await d3.json("./../../my_weather_data.json")

const yAccessor = d => d.temperatureMax
const dateParser = d3.timeParse("%Y-%m-%d")
const xAccessor = d => dateParser(d.date)

// 2. Create chart dimensions
let dimensions = {
  width: window.innerWidth * 0.9,
  height: 400,
  margin: {
    top: 15,
    right: 15,
    bottom: 40,
    left: 60,
  },
}
dimensions.boundedWidth = dimensions.width
  - dimensions.margin.left
  - dimensions.margin.right
dimensions.boundedHeight = dimensions.height
  - dimensions.margin.top
  - dimensions.margin.bottom

// 3. Draw canvas
const wrapper = d3.select("#wrapper")
  .append("svg")
    .attr("width", dimensions.width)
    .attr("height", dimensions.height)

const bounds = wrapper.append("g")
    .style("transform", `translate(${
      dimensions.margin.left
    }px, ${
      dimensions.margin.top
    }px)`)

// 4. Create scales
const yScale = d3.scaleLinear()
  .domain(d3.extent(dataset, yAccessor))
  .range([dimensions.boundedHeight, 0])

const freezingTemperaturePlacement = yScale(32)
const freezingTemperatures = bounds.append("rect")
    .attr("x", 0)
    .attr("width", dimensions.boundedWidth)
    .attr("y", freezingTemperaturePlacement)
    .attr("height", dimensions.boundedHeight
      - freezingTemperaturePlacement)
    .attr("fill", "#e0f3f3")

const xScale = d3.scaleTime()
  .domain(d3.extent(dataset, xAccessor))
  .range([0, dimensions.boundedWidth])

// 5. Draw data
const lineGenerator = d3.line()
  .x(d => xScale(xAccessor(d)))
  .y(d => yScale(yAccessor(d)))

const line = bounds.append("path")
    .attr("d", lineGenerator(dataset))
    .attr("fill", "none")
    .attr("stroke", "#af9358")
    .attr("stroke-width", 2)

// 6. Draw peripherals
const yAxisGenerator = d3.axisLeft()
  .scale(yScale)

const yAxis = bounds.append("g")
  .call(yAxisGenerator)

const xAxisGenerator = d3.axisBottom()
  .scale(xScale)

const xAxis = bounds.append("g")
  .call(xAxisGenerator)
    .style("transform", `translateY(${
      dimensions.boundedHeight
    }px)`)
}
endsnippet


snippet d3accessor "D3 chart boilerplace accessors" b
// 1. Access data
const dataset = await d3.json("./../../my_weather_data.json")

const yAccessor = d => d.temperatureMax
const dateParser = d3.timeParse("%Y-%m-%d")
const xAccessor = d => dateParser(d.date)
endsnippet


snippet d3dimensions "D3 chart boilerplate" b
// 2. Create chart dimensions
let dimensions = {
  width: window.innerWidth * 0.9,
  height: 400,
  margin: {
    top: 15,
    right: 15,
    bottom: 40,
    left: 60,
  },
}
dimensions.boundedWidth = dimensions.width
  - dimensions.margin.left
  - dimensions.margin.right
dimensions.boundedHeight = dimensions.height
  - dimensions.margin.top
  - dimensions.margin.bottom
endsnippet


snippet d3canvas "D3 chart draw canvas" b
// 3. Draw canvas
const wrapper = d3.select("#wrapper")
  .append("svg")
    .attr("width", dimensions.width)
    .attr("height", dimensions.height)

const bounds = wrapper.append("g")
    .style("transform", `translate(${
      dimensions.margin.left
    }px, ${
      dimensions.margin.top
    }px)`)
endsnippet


snippet d3scales "D3 chart create scales" b
// 4. Create scales
const yScale = d3.scaleLinear()
  .domain(d3.extent(dataset, yAccessor))
  .range([dimensions.boundedHeight, 0])

const freezingTemperaturePlacement = yScale(32)
const freezingTemperatures = bounds.append("rect")
    .attr("x", 0)
    .attr("width", dimensions.boundedWidth)
    .attr("y", freezingTemperaturePlacement)
    .attr("height", dimensions.boundedHeight
      - freezingTemperaturePlacement)
    .attr("fill", "#e0f3f3")

const xScale = d3.scaleTime()
  .domain(d3.extent(dataset, xAccessor))
  .range([0, dimensions.boundedWidth])
endsnippet


snippet d3data "D3 chart draw data" b
// 5. Draw data
const lineGenerator = d3.line()
  .x(d => xScale(xAccessor(d)))
  .y(d => yScale(yAccessor(d)))

const line = bounds.append("path")
    .attr("d", lineGenerator(dataset))
    .attr("fill", "none")
    .attr("stroke", "#af9358")
    .attr("stroke-width", 2)
endsnippet


snippet d3peripherals "D3 chart draw peripherals" b
// 6. Draw peripherals
const yAxisGenerator = d3.axisLeft()
  .scale(yScale)

const yAxis = bounds.append("g")
  .call(yAxisGenerator)

const xAxisGenerator = d3.axisBottom()
  .scale(xScale)

const xAxis = bounds.append("g")
  .call(xAxisGenerator)
    .style("transform", `translateY(${
      dimensions.boundedHeight
    }px)`)
}
endsnippet
